// <auto-generated />
using System;
using FUC_Syd.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FUC_Syd.Domain.Migrations
{
    [DbContext(typeof(FUC_SydContext))]
    [Migration("20231116135800_ifitdontworkimkillingmyself")]
    partial class ifitdontworkimkillingmyself
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClassesStudent", b =>
                {
                    b.Property<Guid>("classesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("studentsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("classesId", "studentsId");

                    b.HasIndex("studentsId");

                    b.ToTable("ClassesStudent");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("CheckIn");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Classes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("teacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("teacherId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Grades", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("classidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("grade")
                        .HasColumnType("int");

                    b.Property<Guid>("stu_fullnameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("teacher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("classidId");

                    b.HasIndex("stu_fullnameId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Parents", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parents");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.SickLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("SickLeave");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isadmin")
                        .HasColumnType("bit");

                    b.Property<Guid>("parents")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("unilogin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentsId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isadmin")
                        .HasColumnType("bit");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("ClassesStudent", b =>
                {
                    b.HasOne("FUC_Syd.Domain.Models.Classes", null)
                        .WithMany()
                        .HasForeignKey("classesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUC_Syd.Domain.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("studentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.CheckIn", b =>
                {
                    b.HasOne("FUC_Syd.Domain.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Classes", b =>
                {
                    b.HasOne("FUC_Syd.Domain.Models.Teacher", "teacher")
                        .WithMany()
                        .HasForeignKey("teacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("teacher");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Grades", b =>
                {
                    b.HasOne("FUC_Syd.Domain.Models.Classes", "classid")
                        .WithMany()
                        .HasForeignKey("classidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FUC_Syd.Domain.Models.Student", "stu_fullname")
                        .WithMany("grades")
                        .HasForeignKey("stu_fullnameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classid");

                    b.Navigation("stu_fullname");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.SickLeave", b =>
                {
                    b.HasOne("FUC_Syd.Domain.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Student", b =>
                {
                    b.HasOne("FUC_Syd.Domain.Models.Parents", null)
                        .WithMany("students")
                        .HasForeignKey("ParentsId");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Parents", b =>
                {
                    b.Navigation("students");
                });

            modelBuilder.Entity("FUC_Syd.Domain.Models.Student", b =>
                {
                    b.Navigation("grades");
                });
#pragma warning restore 612, 618
        }
    }
}
